{"ast":null,"code":"var _jsxFileName = \"D:\\\\aivvoice\\\\frontend\\\\src\\\\pages\\\\EntryForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, Paper, TextField, Button, Typography, Box, IconButton, Alert, CircularProgress } from '@mui/material';\nimport { Mic, Stop, PlayArrow, Save, Cancel } from '@mui/icons-material';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EntryForm = () => {\n  _s();\n  const navigate = useNavigate();\n  const [description, setDescription] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [transcription, setTranscription] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const audioRef = useRef(null);\n  const chunksRef = useRef([]);\n  useEffect(() => {\n    return () => {\n      if (audioUrl) {\n        URL.revokeObjectURL(audioUrl);\n      }\n    };\n  }, [audioUrl]);\n  const handleDescriptionChange = e => {\n    setDescription(e.target.value);\n  };\n  const startRecording = async () => {\n    try {\n      // Check if MediaRecorder is supported\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n        setError('Audio recording is not supported in this browser. Please use a modern browser like Chrome, Firefox, or Safari.');\n        return;\n      }\n      if (!window.MediaRecorder) {\n        setError('MediaRecorder is not supported in this browser. Please use a modern browser.');\n        return;\n      }\n\n      // Request high-quality audio for better transcription\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          sampleRate: 44100,\n          channelCount: 1\n        }\n      });\n\n      // Try different MIME types based on browser support\n      let mimeType = 'audio/webm;codecs=opus';\n      if (!MediaRecorder.isTypeSupported(mimeType)) {\n        mimeType = 'audio/webm';\n        if (!MediaRecorder.isTypeSupported(mimeType)) {\n          mimeType = 'audio/mp4';\n          if (!MediaRecorder.isTypeSupported(mimeType)) {\n            mimeType = 'audio/wav';\n            if (!MediaRecorder.isTypeSupported(mimeType)) {\n              mimeType = ''; // Let browser choose\n            }\n          }\n        }\n      }\n      const mediaRecorder = new MediaRecorder(stream, mimeType ? {\n        mimeType\n      } : {});\n      mediaRecorderRef.current = mediaRecorder;\n      chunksRef.current = [];\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          chunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunksRef.current, {\n          type: mediaRecorder.mimeType || 'audio/webm'\n        });\n\n        // Basic validation - just check if we have audio data\n        if (blob.size === 0) {\n          setError('Recording failed - no audio data captured');\n          return;\n        }\n        if (blob.size > 10 * 1024 * 1024) {\n          // 10MB limit\n          setError('Recording is too large (max 10MB)');\n          return;\n        }\n        setAudioBlob(blob);\n        const url = URL.createObjectURL(blob);\n        setAudioUrl(url);\n        stream.getTracks().forEach(track => track.stop());\n\n        // Clear any previous errors and show success message\n        setError('');\n        const formatInfo = blob.type ? blob.type.split(';')[0] : 'browser default';\n        setSuccess(`Audio recorded successfully! Format: ${formatInfo}, Size: ${(blob.size / 1024).toFixed(1)}KB`);\n      };\n      mediaRecorder.start(1000); // Collect data every second\n      setIsRecording(true);\n      setError(''); // Clear any previous errors\n    } catch (err) {\n      console.error('Error starting recording:', err);\n      if (err.name === 'NotAllowedError') {\n        setError('Microphone access denied. Please allow microphone permissions and try again.');\n      } else if (err.name === 'NotFoundError') {\n        setError('No microphone found. Please connect a microphone and try again.');\n      } else {\n        setError('Failed to start recording. Please check your microphone and try again.');\n      }\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n  const playRecording = () => {\n    if (audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n        setIsPlaying(false);\n      } else {\n        audioRef.current.play();\n        setIsPlaying(true);\n      }\n    }\n  };\n  const blobToBase64 = blob => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        resolve(reader.result.split(',')[1]);\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  };\n  const transcribeAudio = async () => {\n    if (!audioBlob) {\n      setError('No audio recording to transcribe');\n      return;\n    }\n    try {\n      setLoading(true);\n      setError('');\n      const base64Audio = await blobToBase64(audioBlob);\n\n      // Send audio to Gemini for transcription and analysis\n      const response = await api.post('/api/ai/transcribe', {\n        audioData: base64Audio,\n        mimeType: audioBlob.type || 'audio/webm'\n      });\n      if (response.data.transcription) {\n        setTranscription(response.data.transcription);\n        let successMessage = 'Audio transcribed and analyzed successfully!';\n\n        // Show analysis results if available\n        if (response.data.analysis) {\n          const {\n            analysis\n          } = response.data;\n          successMessage += '\\n\\n🎤 Voice Analysis Results:';\n          if (analysis.events && analysis.events.length > 0) {\n            successMessage += `\\n📅 Found ${analysis.events.length} events:`;\n            analysis.events.forEach(event => {\n              successMessage += `\\n• ${event.title} (${event.priority} priority)`;\n            });\n          }\n          if (analysis.tasks && analysis.tasks.length > 0) {\n            successMessage += `\\n✅ Found ${analysis.tasks.length} tasks:`;\n            analysis.tasks.forEach(task => {\n              successMessage += `\\n• ${task.title} (${task.priority} priority)`;\n            });\n          }\n          if (analysis.deadlines && analysis.deadlines.length > 0) {\n            successMessage += `\\n⏰ Found ${analysis.deadlines.length} deadlines:`;\n            analysis.deadlines.forEach(deadline => {\n              successMessage += `\\n• ${deadline.title} (${deadline.priority} priority)`;\n            });\n          }\n          if (analysis.notes && analysis.notes.length > 0) {\n            successMessage += `\\n📝 Found ${analysis.notes.length} notes:`;\n            analysis.notes.forEach(note => {\n              successMessage += `\\n• ${note}`;\n            });\n          }\n          if (analysis.summary && analysis.summary.hourly) {\n            successMessage += `\\n\\n📊 ${analysis.summary.hourly}`;\n          }\n        }\n        setSuccess(successMessage);\n      } else {\n        setError('No transcription received from the server');\n      }\n    } catch (err) {\n      console.error('Transcription error:', err);\n      setError('Failed to transcribe audio. Please try again or add a description manually.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setSuccess('');\n\n    // Validate that we have either audio or description\n    if (!audioBlob && !description.trim()) {\n      setError('Please record audio or add a description');\n      return;\n    }\n    try {\n      setLoading(true);\n      const entryData = {\n        text: transcription || description || 'Voice entry',\n        description: description,\n        voiceUrl: audioUrl\n      };\n\n      // Include audio data for voice analysis if available\n      if (audioBlob && audioUrl) {\n        const audioData = await blobToBase64(audioBlob);\n        entryData.audioData = audioData;\n        entryData.mimeType = audioBlob.type || 'audio/webm';\n      }\n      console.log('Sending entry data:', {\n        hasAudio: !!entryData.audioData,\n        hasDescription: !!description,\n        hasTranscription: !!transcription\n      });\n      const response = await api.post('/api/entries', entryData);\n      let successMessage = 'Entry saved successfully!';\n\n      // Add voice analysis results to success message\n      if (response.data.voiceAnalysis) {\n        const {\n          voiceAnalysis,\n          createdReminders\n        } = response.data;\n        if (voiceAnalysis.success) {\n          successMessage += `\\n\\n🎤 Voice Analysis Results:`;\n          if (voiceAnalysis.eventsFound > 0) {\n            successMessage += `\\n• Found ${voiceAnalysis.eventsFound} events`;\n          }\n          if (voiceAnalysis.remindersFound > 0) {\n            successMessage += `\\n• Found ${voiceAnalysis.remindersFound} reminders`;\n          }\n          if (createdReminders > 0) {\n            successMessage += `\\n✅ Created ${createdReminders} automatic reminders!`;\n          }\n        }\n      }\n      setSuccess(successMessage);\n      setTimeout(() => {\n        navigate('/dashboard');\n      }, 2500); // Longer timeout to show voice analysis results\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Save entry error:', err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to save entry');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    sx: {\n      mt: 4\n    },\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"New Voice Entry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        sx: {\n          mb: 3\n        },\n        children: \"Record your thoughts, experiences, or reminders. The AI will automatically analyze your voice for important events and tasks.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 3\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        sx: {\n          mb: 3\n        },\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 3,\n            p: 3,\n            bgcolor: 'grey.50',\n            borderRadius: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Voice Recording\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              gap: 2,\n              alignItems: 'center',\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(IconButton, {\n              color: isRecording ? 'error' : 'primary',\n              onClick: isRecording ? stopRecording : startRecording,\n              disabled: loading,\n              title: isRecording ? 'Stop recording' : 'Start recording',\n              size: \"large\",\n              children: isRecording ? /*#__PURE__*/_jsxDEV(Stop, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 32\n              }, this) : /*#__PURE__*/_jsxDEV(Mic, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 43\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this), audioUrl && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                color: \"primary\",\n                onClick: playRecording,\n                disabled: loading,\n                title: \"Play recording\",\n                children: /*#__PURE__*/_jsxDEV(PlayArrow, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 361,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                onClick: transcribeAudio,\n                disabled: loading || !audioBlob,\n                startIcon: /*#__PURE__*/_jsxDEV(Mic, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 367,\n                  columnNumber: 32\n                }, this),\n                children: \"Transcribe & Analyze\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true), isRecording && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"error\",\n              children: \"Recording... Click stop when finished\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"audio\", {\n            ref: audioRef,\n            src: audioUrl,\n            onEnded: () => setIsPlaying(false),\n            controls: true,\n            style: {\n              width: '100%',\n              marginTop: 8\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 15\n          }, this), transcription && /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"info\",\n            sx: {\n              mt: 2\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Transcription:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 19\n              }, this), \" \", transcription]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          rows: 4,\n          label: \"Description (Optional)\",\n          value: description,\n          onChange: handleDescriptionChange,\n          placeholder: \"Add any additional notes or context...\",\n          helperText: `${description.length}/500 characters`,\n          inputProps: {\n            maxLength: 500\n          },\n          sx: {\n            mb: 3\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            gap: 2,\n            justifyContent: 'flex-end'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: () => navigate('/dashboard'),\n            disabled: loading,\n            startIcon: /*#__PURE__*/_jsxDEV(Cancel, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 26\n            }, this),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            startIcon: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 36\n            }, this) : /*#__PURE__*/_jsxDEV(Save, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 69\n            }, this),\n            disabled: loading || !audioBlob && !description.trim(),\n            children: loading ? 'Saving...' : 'Save Entry'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 5\n  }, this);\n};\n_s(EntryForm, \"fqcbN+Z2VaeFPVCiuYZKljzVU/I=\", false, function () {\n  return [useNavigate];\n});\n_c = EntryForm;\nexport default EntryForm;\nvar _c;\n$RefreshReg$(_c, \"EntryForm\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","Container","Paper","TextField","Button","Typography","Box","IconButton","Alert","CircularProgress","Mic","Stop","PlayArrow","Save","Cancel","api","jsxDEV","_jsxDEV","Fragment","_Fragment","EntryForm","_s","navigate","description","setDescription","isRecording","setIsRecording","isPlaying","setIsPlaying","audioBlob","setAudioBlob","audioUrl","setAudioUrl","transcription","setTranscription","loading","setLoading","error","setError","success","setSuccess","mediaRecorderRef","audioRef","chunksRef","URL","revokeObjectURL","handleDescriptionChange","e","target","value","startRecording","navigator","mediaDevices","getUserMedia","window","MediaRecorder","stream","audio","echoCancellation","noiseSuppression","sampleRate","channelCount","mimeType","isTypeSupported","mediaRecorder","current","ondataavailable","event","data","size","push","onstop","blob","Blob","type","url","createObjectURL","getTracks","forEach","track","stop","formatInfo","split","toFixed","start","err","console","name","stopRecording","playRecording","pause","play","blobToBase64","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","transcribeAudio","base64Audio","response","post","audioData","successMessage","analysis","events","length","title","priority","tasks","task","deadlines","deadline","notes","note","summary","hourly","handleSubmit","preventDefault","trim","entryData","text","voiceUrl","log","hasAudio","hasDescription","hasTranscription","voiceAnalysis","createdReminders","eventsFound","remindersFound","setTimeout","_err$response","_err$response$data","message","maxWidth","sx","mt","children","elevation","p","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","mb","severity","component","onSubmit","bgcolor","borderRadius","display","gap","alignItems","onClick","disabled","startIcon","ref","src","onEnded","controls","style","width","marginTop","fullWidth","multiline","rows","label","onChange","placeholder","helperText","inputProps","maxLength","justifyContent","_c","$RefreshReg$"],"sources":["D:/aivvoice/frontend/src/pages/EntryForm.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  Box,\r\n  IconButton,\r\n  Alert,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport {\r\n  Mic,\r\n  Stop,\r\n  PlayArrow,\r\n  Save,\r\n  Cancel\r\n} from '@mui/icons-material';\r\nimport api from '../services/api';\r\n\r\nconst EntryForm = () => {\r\n  const navigate = useNavigate();\r\n  const [description, setDescription] = useState('');\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [audioBlob, setAudioBlob] = useState(null);\r\n  const [audioUrl, setAudioUrl] = useState(null);\r\n  const [transcription, setTranscription] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  const mediaRecorderRef = useRef(null);\r\n  const audioRef = useRef(null);\r\n  const chunksRef = useRef([]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (audioUrl) {\r\n        URL.revokeObjectURL(audioUrl);\r\n      }\r\n    };\r\n  }, [audioUrl]);\r\n\r\n  const handleDescriptionChange = (e) => {\r\n    setDescription(e.target.value);\r\n  };\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      // Check if MediaRecorder is supported\r\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\r\n        setError('Audio recording is not supported in this browser. Please use a modern browser like Chrome, Firefox, or Safari.');\r\n        return;\r\n      }\r\n\r\n      if (!window.MediaRecorder) {\r\n        setError('MediaRecorder is not supported in this browser. Please use a modern browser.');\r\n        return;\r\n      }\r\n\r\n      // Request high-quality audio for better transcription\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        audio: {\r\n          echoCancellation: true,\r\n          noiseSuppression: true,\r\n          sampleRate: 44100,\r\n          channelCount: 1\r\n        }\r\n      });\r\n\r\n      // Try different MIME types based on browser support\r\n      let mimeType = 'audio/webm;codecs=opus';\r\n      if (!MediaRecorder.isTypeSupported(mimeType)) {\r\n        mimeType = 'audio/webm';\r\n        if (!MediaRecorder.isTypeSupported(mimeType)) {\r\n          mimeType = 'audio/mp4';\r\n          if (!MediaRecorder.isTypeSupported(mimeType)) {\r\n            mimeType = 'audio/wav';\r\n            if (!MediaRecorder.isTypeSupported(mimeType)) {\r\n              mimeType = ''; // Let browser choose\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      const mediaRecorder = new MediaRecorder(stream, mimeType ? { mimeType } : {});\r\n\r\n      mediaRecorderRef.current = mediaRecorder;\r\n      chunksRef.current = [];\r\n\r\n      mediaRecorder.ondataavailable = (event) => {\r\n        if (event.data.size > 0) {\r\n          chunksRef.current.push(event.data);\r\n        }\r\n      };\r\n\r\n      mediaRecorder.onstop = () => {\r\n        const blob = new Blob(chunksRef.current, {\r\n          type: mediaRecorder.mimeType || 'audio/webm'\r\n        });\r\n\r\n        // Basic validation - just check if we have audio data\r\n        if (blob.size === 0) {\r\n          setError('Recording failed - no audio data captured');\r\n          return;\r\n        }\r\n\r\n        if (blob.size > 10 * 1024 * 1024) { // 10MB limit\r\n          setError('Recording is too large (max 10MB)');\r\n          return;\r\n        }\r\n\r\n        setAudioBlob(blob);\r\n        const url = URL.createObjectURL(blob);\r\n        setAudioUrl(url);\r\n        stream.getTracks().forEach(track => track.stop());\r\n\r\n        // Clear any previous errors and show success message\r\n        setError('');\r\n        const formatInfo = blob.type ? blob.type.split(';')[0] : 'browser default';\r\n        setSuccess(`Audio recorded successfully! Format: ${formatInfo}, Size: ${(blob.size / 1024).toFixed(1)}KB`);\r\n      };\r\n\r\n      mediaRecorder.start(1000); // Collect data every second\r\n      setIsRecording(true);\r\n      setError(''); // Clear any previous errors\r\n    } catch (err) {\r\n      console.error('Error starting recording:', err);\r\n      if (err.name === 'NotAllowedError') {\r\n        setError('Microphone access denied. Please allow microphone permissions and try again.');\r\n      } else if (err.name === 'NotFoundError') {\r\n        setError('No microphone found. Please connect a microphone and try again.');\r\n      } else {\r\n        setError('Failed to start recording. Please check your microphone and try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorderRef.current && isRecording) {\r\n      mediaRecorderRef.current.stop();\r\n      setIsRecording(false);\r\n    }\r\n  };\r\n\r\n  const playRecording = () => {\r\n    if (audioRef.current) {\r\n      if (isPlaying) {\r\n        audioRef.current.pause();\r\n        setIsPlaying(false);\r\n      } else {\r\n        audioRef.current.play();\r\n        setIsPlaying(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const blobToBase64 = (blob) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        resolve(reader.result.split(',')[1]);\r\n      };\r\n      reader.onerror = reject;\r\n      reader.readAsDataURL(blob);\r\n    });\r\n  };\r\n\r\n  const transcribeAudio = async () => {\r\n    if (!audioBlob) {\r\n      setError('No audio recording to transcribe');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError('');\r\n\r\n      const base64Audio = await blobToBase64(audioBlob);\r\n\r\n      // Send audio to Gemini for transcription and analysis\r\n      const response = await api.post('/api/ai/transcribe', {\r\n        audioData: base64Audio,\r\n        mimeType: audioBlob.type || 'audio/webm'\r\n      });\r\n\r\n      if (response.data.transcription) {\r\n        setTranscription(response.data.transcription);\r\n\r\n        let successMessage = 'Audio transcribed and analyzed successfully!';\r\n\r\n        // Show analysis results if available\r\n        if (response.data.analysis) {\r\n          const { analysis } = response.data;\r\n          successMessage += '\\n\\n🎤 Voice Analysis Results:';\r\n\r\n          if (analysis.events && analysis.events.length > 0) {\r\n            successMessage += `\\n📅 Found ${analysis.events.length} events:`;\r\n            analysis.events.forEach(event => {\r\n              successMessage += `\\n• ${event.title} (${event.priority} priority)`;\r\n            });\r\n          }\r\n\r\n          if (analysis.tasks && analysis.tasks.length > 0) {\r\n            successMessage += `\\n✅ Found ${analysis.tasks.length} tasks:`;\r\n            analysis.tasks.forEach(task => {\r\n              successMessage += `\\n• ${task.title} (${task.priority} priority)`;\r\n            });\r\n          }\r\n\r\n          if (analysis.deadlines && analysis.deadlines.length > 0) {\r\n            successMessage += `\\n⏰ Found ${analysis.deadlines.length} deadlines:`;\r\n            analysis.deadlines.forEach(deadline => {\r\n              successMessage += `\\n• ${deadline.title} (${deadline.priority} priority)`;\r\n            });\r\n          }\r\n\r\n          if (analysis.notes && analysis.notes.length > 0) {\r\n            successMessage += `\\n📝 Found ${analysis.notes.length} notes:`;\r\n            analysis.notes.forEach(note => {\r\n              successMessage += `\\n• ${note}`;\r\n            });\r\n          }\r\n\r\n          if (analysis.summary && analysis.summary.hourly) {\r\n            successMessage += `\\n\\n📊 ${analysis.summary.hourly}`;\r\n          }\r\n        }\r\n\r\n        setSuccess(successMessage);\r\n      } else {\r\n        setError('No transcription received from the server');\r\n      }\r\n    } catch (err) {\r\n      console.error('Transcription error:', err);\r\n      setError('Failed to transcribe audio. Please try again or add a description manually.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setSuccess('');\r\n\r\n    // Validate that we have either audio or description\r\n    if (!audioBlob && !description.trim()) {\r\n      setError('Please record audio or add a description');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const entryData = {\r\n        text: transcription || description || 'Voice entry',\r\n        description: description,\r\n        voiceUrl: audioUrl\r\n      };\r\n\r\n      // Include audio data for voice analysis if available\r\n      if (audioBlob && audioUrl) {\r\n        const audioData = await blobToBase64(audioBlob);\r\n        entryData.audioData = audioData;\r\n        entryData.mimeType = audioBlob.type || 'audio/webm';\r\n      }\r\n\r\n      console.log('Sending entry data:', {\r\n        hasAudio: !!entryData.audioData,\r\n        hasDescription: !!description,\r\n        hasTranscription: !!transcription\r\n      });\r\n\r\n      const response = await api.post('/api/entries', entryData);\r\n\r\n      let successMessage = 'Entry saved successfully!';\r\n\r\n      // Add voice analysis results to success message\r\n      if (response.data.voiceAnalysis) {\r\n        const { voiceAnalysis, createdReminders } = response.data;\r\n        if (voiceAnalysis.success) {\r\n          successMessage += `\\n\\n🎤 Voice Analysis Results:`;\r\n          if (voiceAnalysis.eventsFound > 0) {\r\n            successMessage += `\\n• Found ${voiceAnalysis.eventsFound} events`;\r\n          }\r\n          if (voiceAnalysis.remindersFound > 0) {\r\n            successMessage += `\\n• Found ${voiceAnalysis.remindersFound} reminders`;\r\n          }\r\n          if (createdReminders > 0) {\r\n            successMessage += `\\n✅ Created ${createdReminders} automatic reminders!`;\r\n          }\r\n        }\r\n      }\r\n\r\n      setSuccess(successMessage);\r\n      setTimeout(() => {\r\n        navigate('/dashboard');\r\n      }, 2500); // Longer timeout to show voice analysis results\r\n\r\n    } catch (err) {\r\n      console.error('Save entry error:', err);\r\n      setError(err.response?.data?.message || 'Failed to save entry');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\" sx={{ mt: 4 }}>\r\n      <Paper elevation={3} sx={{ p: 4 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          New Voice Entry\r\n        </Typography>\r\n\r\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n          Record your thoughts, experiences, or reminders. The AI will automatically analyze your voice for important events and tasks.\r\n        </Typography>\r\n\r\n        {error && (\r\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\r\n            {error}\r\n          </Alert>\r\n        )}\r\n\r\n        {success && (\r\n          <Alert severity=\"success\" sx={{ mb: 3 }}>\r\n            {success}\r\n          </Alert>\r\n        )}\r\n\r\n        <Box component=\"form\" onSubmit={handleSubmit}>\r\n          {/* Voice Recording Section */}\r\n          <Box sx={{ mb: 3, p: 3, bgcolor: 'grey.50', borderRadius: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Voice Recording\r\n            </Typography>\r\n\r\n            <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', mb: 2 }}>\r\n              <IconButton\r\n                color={isRecording ? 'error' : 'primary'}\r\n                onClick={isRecording ? stopRecording : startRecording}\r\n                disabled={loading}\r\n                title={isRecording ? 'Stop recording' : 'Start recording'}\r\n                size=\"large\"\r\n              >\r\n                {isRecording ? <Stop /> : <Mic />}\r\n              </IconButton>\r\n\r\n              {audioUrl && (\r\n                <>\r\n                  <IconButton\r\n                    color=\"primary\"\r\n                    onClick={playRecording}\r\n                    disabled={loading}\r\n                    title=\"Play recording\"\r\n                  >\r\n                    <PlayArrow />\r\n                  </IconButton>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    onClick={transcribeAudio}\r\n                    disabled={loading || !audioBlob}\r\n                    startIcon={<Mic />}\r\n                  >\r\n                    Transcribe & Analyze\r\n                  </Button>\r\n                </>\r\n              )}\r\n\r\n              {isRecording && (\r\n                <Typography variant=\"body2\" color=\"error\">\r\n                  Recording... Click stop when finished\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n\r\n            {audioUrl && (\r\n              <audio\r\n                ref={audioRef}\r\n                src={audioUrl}\r\n                onEnded={() => setIsPlaying(false)}\r\n                controls\r\n                style={{ width: '100%', marginTop: 8 }}\r\n              />\r\n            )}\r\n\r\n            {transcription && (\r\n              <Alert severity=\"info\" sx={{ mt: 2 }}>\r\n                <Typography variant=\"body2\">\r\n                  <strong>Transcription:</strong> {transcription}\r\n                </Typography>\r\n              </Alert>\r\n            )}\r\n          </Box>\r\n\r\n          {/* Optional Description */}\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={4}\r\n            label=\"Description (Optional)\"\r\n            value={description}\r\n            onChange={handleDescriptionChange}\r\n            placeholder=\"Add any additional notes or context...\"\r\n            helperText={`${description.length}/500 characters`}\r\n            inputProps={{ maxLength: 500 }}\r\n            sx={{ mb: 3 }}\r\n          />\r\n\r\n          {/* Action Buttons */}\r\n          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => navigate('/dashboard')}\r\n              disabled={loading}\r\n              startIcon={<Cancel />}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              startIcon={loading ? <CircularProgress size={20} /> : <Save />}\r\n              disabled={loading || (!audioBlob && !description.trim())}\r\n            >\r\n              {loading ? 'Saving...' : 'Save Entry'}\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EntryForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}